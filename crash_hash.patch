From 700fd38879053508657bf273bb109437cacc9447 Mon Sep 17 00:00:00 2001
From: NikLeberg <niklaus.leuenb+github@gmail.com>
Date: Mon, 9 Dec 2024 04:54:00 +0000
Subject: [PATCH] Show fuzzy-stack-hash for crashes in debug build.

---
 src/debug.c | 17 +++++++++++++++++
 src/debug.h |  1 +
 src/ident.c | 17 -----------------
 src/util.c  |  4 ++++
 src/util.h  | 17 +++++++++++++++++
 5 files changed, 39 insertions(+), 17 deletions(-)

diff --git a/src/debug.c b/src/debug.c
index 8806af5e7..7660abeb7 100644
--- a/src/debug.c
+++ b/src/debug.c
@@ -62,6 +62,7 @@
 #endif
 
 #define MAX_TRACE_DEPTH   25
+#define MAX_HASH_DEPTH    10
 
 struct debug_info {
    A(debug_frame_t*) frames;
@@ -926,6 +927,22 @@ const debug_frame_t *debug_get_frame(debug_info_t *di, unsigned n)
    return AGET(di->frames, n);
 }
 
+uint32_t debug_hash(debug_info_t *di)
+{
+   hash_state_t hash = HASH_INIT;
+   int hash_depth = 0;
+
+   const int nframes = debug_count_frames(di);
+   for (int n = 1; n < nframes; n++) {
+      const debug_frame_t *f = debug_get_frame(di, n);
+      if (f->kind == FRAME_PROG && f->symbol != NULL
+          && hash_depth++ < MAX_HASH_DEPTH)
+         hash_update(&hash, f->symbol, strlen(f->symbol));
+   }
+
+   return hash;
+}
+
 void debug_add_unwinder(void *start, size_t len, debug_unwind_fn_t fn,
                         void *context)
 {
diff --git a/src/debug.h b/src/debug.h
index 0466f9ae0..b29bd7864 100644
--- a/src/debug.h
+++ b/src/debug.h
@@ -61,6 +61,7 @@ debug_info_t *debug_capture(void);
 void debug_free(debug_info_t *di);
 unsigned debug_count_frames(debug_info_t *di);
 const debug_frame_t *debug_get_frame(debug_info_t *di, unsigned n);
+uint32_t debug_hash(debug_info_t *di);
 
 void debug_add_unwinder(void *start, size_t len, debug_unwind_fn_t fn,
                         void *context);
diff --git a/src/ident.c b/src/ident.c
index fd0c1963c..25e5d119c 100644
--- a/src/ident.c
+++ b/src/ident.c
@@ -29,9 +29,6 @@
 #include <ctype.h>
 #include <limits.h>
 
-#define HASH_INIT 5381;
-typedef uint32_t hash_state_t;
-
 #define INITIAL_SIZE  1024
 #define REPROBE_LIMIT 20
 #define MOVED_TAG     1
@@ -68,20 +65,6 @@ typedef struct {
 static ident_tab_t *table = NULL;
 static ident_tab_t *resizing = NULL;
 
-static inline int hash_update(hash_state_t *state, const char *key, int nchars)
-{
-   // DJB2 hash function from here:
-   //   http://www.cse.yorku.ca/~oz/hash.html
-
-   hash_state_t hash = *state;
-   const char *p = key;
-   for (; p < key + nchars && *p; p++)
-      hash = ((hash << 5) + hash) + *p;
-
-   *state = hash;
-   return p - key;
-}
-
 static ident_t ident_alloc(size_t len, hash_state_t hash)
 {
    ident_t id = xmalloc_flex(sizeof(struct _ident), len + 1, sizeof(char));
diff --git a/src/util.c b/src/util.c
index 3f89e5b19..3c5870616 100644
--- a/src/util.c
+++ b/src/util.c
@@ -713,6 +713,10 @@ void show_stacktrace(void)
 
    }
 
+#ifdef DEBUG
+   color_fprintf(stderr, "\n$!red$Crash hash: %08x$$\n", debug_hash(di));
+#endif
+
    debug_free(di);
 
 #if defined __linux__ && !defined HAVE_LIBDW && !defined HAVE_LIBDWARF
diff --git a/src/util.h b/src/util.h
index 347a847ce..84478c661 100644
--- a/src/util.h
+++ b/src/util.h
@@ -514,4 +514,21 @@ void list_clear(ptr_list_t *l);
          __tmp;                                         \
       })
 
+#define HASH_INIT 5381;
+typedef uint32_t hash_state_t;
+
+static inline int hash_update(hash_state_t *state, const char *key, int nchars)
+{
+   // DJB2 hash function from here:
+   //   http://www.cse.yorku.ca/~oz/hash.html
+
+   hash_state_t hash = *state;
+   const char *p = key;
+   for (; p < key + nchars && *p; p++)
+      hash = ((hash << 5) + hash) + *p;
+
+   *state = hash;
+   return p - key;
+}
+
 #endif // _UTIL_H
